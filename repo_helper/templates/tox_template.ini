# This file is managed by `repo_helper`. Don't edit it directly

# This file must be in the same dir as setup.py
[tox]
envlist = {% for version in tox_py_versions %}{{ version }}, {% endfor %}mypy, build
skip_missing_interpreters = True
requires = pip >= 19.0.0{% for requirement in tox_requirements %}
           {{ requirement }}{% endfor %}


[travis]
python =
{% for py_ver, tox_py_ver in tox_travis_versions.items() %}    {{ py_ver }}: {{ tox_py_ver }}{{ '\n' }}{% endfor %}

[gh-actions]
python =
{% for py_ver, tox_py_ver in gh_actions_versions.items() %}    {{ py_ver }}: {{ tox_py_ver }}{{ '\n' }}{% endfor %}

[testenv]
# Install test requirements
{% if enable_tests %}deps = -r{toxinidir}/{{ tests_dir }}/requirements.txt{% endif %}
{% if tox_testenv_extras %}extras = {{ tox_testenv_extras }}{% endif %}
commands =
    python --version
{% if enable_tests %};   Run tests
    python -m pytest --cov={{ import_name }} -r aR {{ tests_dir }}/{% endif %} {posargs}
{# --reruns 1 --reruns-delay 5 #}

{% if enable_docs %}
[testenv:docs]
basepython = python3.8
changedir = {toxinidir}/{{docs_dir}}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/{{docs_dir}}/requirements.txt
commands = sphinx-build -M html . ./build {posargs}

{% endif %}
[testenv:bumpversion]
skip_install = true
deps = bump2version
commands = bumpversion --verbose {posargs}


[testenv:build]
skip_install = true
changedir = {toxinidir}
deps =
    twine
    pep517
    check-wheel-contents{% for requirement in tox_build_requirements %}
    {{ requirement }}{% endfor %}
commands =
    python -m pep517.build --source --binary "{toxinidir}"
;    python setup.py {posargs} sdist bdist_wheel
    twine check dist/*
    check-wheel-contents dist/


[testenv:lint]
basepython = python{{ min_py_version }}
changedir = {toxinidir}
ignore_errors = true
skip_install = true
deps =
    autopep8 >=1.5.2
    flake8 >=3.8.2
    flake8-2020 >= 1.6.0
    flake8_strftime
    flake8-pytest-style
    flake8-docstrings
    git+https://github.com/domdfcoding/flake8-rst-docstrings.git
    flake8-builtins{#    flake8-walrus#}
    pygments
    git+https://github.com/domdfcoding/flake8-quotes.git
commands = flake8 {{ source_files }}


[testenv:yapf]
basepython = python3.7
changedir = {toxinidir}
skip_install = true
ignore_errors = true
deps = yapf
commands = yapf -i --recursive {{ source_files }}{% if yapf_exclude %} --exclude{% for exclude in yapf_exclude %} "{{ exclude }}"{% endfor %}{% endif %}


[testenv:isort]
basepython = python{{ min_py_version }}
skip_install = true
ignore_errors = true
changedir = {toxinidir}
deps = isort >=5.1.0
commands = isort {{ source_files }}


[testenv:mypy]
basepython = python{{ min_py_version }}
{% if tox_testenv_extras %}extras = {{ tox_testenv_extras }}{% endif %}
ignore_errors = true
changedir = {toxinidir}
deps =
    mypy
{% if enable_tests %}    -r{toxinidir}/{{ tests_dir }}/requirements.txt{% endif %}
{% for dep in mypy_deps %}    {{ dep }}{% endfor %}
{% if stubs_package %}commands = mypy tests
{% else %}commands = mypy {{ source_files }}
{% endif %}

[testenv:bandit]
basepython = python{{ min_py_version }}
{% if tox_testenv_extras %}extras = {{ tox_testenv_extras }}{% endif %}
ignore_errors = true
changedir = {toxinidir}
deps =
    bandit
whitelist_externals = /usr/bin/printf
commands =
    printf "===== Running Bandit on {{ import_name }} ====="
{% if stubs_package %}    bandit {{ join_path(source_dir, import_name) }}-stubs -r
{% else %}    bandit {{ join_path(source_dir, import_name) }} -r
{% endif %}    printf "===== Running Bandit on tests ====="
    bandit {{ tests_dir }} -r -s B101


[testenv:pyup]
basepython = python{{ min_py_version }}
{% if tox_testenv_extras %}extras = {{ tox_testenv_extras }}{% endif %}
ignore_errors = true
changedir={toxinidir}
deps = pyupgrade-directories
commands = pyup_dirs {{ source_files }} --py36-plus --recursive


[testenv:qa]
basepython = python{{ min_py_version }}
skip_install = True
ignore_errors = true
whitelist_externals = tox
changedir = {toxinidir}
commands = tox -e pyup,isort,yapf,mypy,lint {posargs}


[testenv:coverage]
basepython = python{{ min_py_version }}
skip_install = True
ignore_errors = true
whitelist_externals = /bin/bash
changedir = {toxinidir}
deps =
    coverage
    coverage_pyver_pragma
commands =
    /bin/bash -c "rm -rf htmlcov"
    coverage html
    /bin/bash -c "DISPLAY=:0 firefox 'htmlcov/index.html'"


[flake8]
max-line-length = 120
select = {% for e in lint_fix_list + lint_warn_list + code_only_warning %}{{ e }} {% endfor %}
exclude = .git,__pycache__,{{docs_dir}},old,build,dist,make_conda_recipe.py,__pkginfo__.py,setup.py
rst-roles =
    class,
    func,
    mod,
    py:obj,
    py:class,
    ref,
    meth,
    exc,
    attr,
rst-directives =
    envvar,
    exception,
    seealso
per-file-ignores =
    {{ tests_dir }}/*: {% for e in code_only_warning %}{{ e }} {% endfor %}
pytest-parametrize-names-type = csv
inline-quotes = "
multiline-quotes = """
docstring-quotes = """
{# max-complexity = 13 #}

[mypy]
python_version = 3.6
ignore_missing_imports = True
namespace_packages = True

{% if import_name != "coverage_pyver_pragma" %}
[coverage:run]
plugins =
    coverage_pyver_pragma
{% endif %}

[check-wheel-contents]
{% if py_modules %}toplevel = {{ import_name }}.py
{% elif stubs_package %}toplevel = {{ import_name }}-stubs{% if pure_python %}
package = {{ join_path(source_dir, import_name) }}-stubs{% endif %}{# Don't check contents for packages with binary extensions #}
{% else %}toplevel = {{ import_name }}{% if pure_python %}
package = {{ join_path(source_dir, import_name) }}{% endif %}{# Don't check contents for packages with binary extensions #}
{% endif %}